#!/usr/bin/env python3
"""
aaKomp Wrapper: Download lineage, build miBF if needed, run aaKomp, and perform post-analysis.
Written by Johnathan Wong
"""

import argparse
import os
import subprocess
import sys
import shutil

def log(msg):
    sys.stderr.write(f"{msg}\n")

def run_help(binary_name):
    log(f"Displaying help for {binary_name}")
    try:
        subprocess.run([binary_name, "-h"], check=True)
    except FileNotFoundError:
        log(f"Error: {binary_name} not found in PATH.")

def download_lineage(lineage, data_dir):
    log(f"Downloading data for lineage '{lineage}' into '{data_dir}'...")
    # Replace with actual download logic
    fasta_path = os.path.join(data_dir, f"{lineage}.fa")
    log(f"Finished downloading lineage. File: {fasta_path}")

def is_database_built(mibf_path):
    exists = os.path.isfile(mibf_path)
    log(f"{'Located' if exists else 'Could not locate'} miBF at: {mibf_path}")
    return exists

def wrap_with_time(cmd, label, output_prefix, track_time):
    if track_time and shutil.which("/usr/bin/time"):
        time_file = f"{label}_{output_prefix}.time"
        return ["/usr/bin/time", "-pv", "-o", time_file] + cmd
    return cmd

def run_make_mibf(args):
    log("Building miBF using make_mibf...")

    

    # Softlink reference into db_dir so make_mibf can see it locally
    ref_name = os.path.basename(args.reference)
    base_name = os.path.splitext(ref_name)[0]
    full_db_path = os.path.join(args.db_dir, base_name)
    os.makedirs(full_db_path, exist_ok=True)
    ref_path = os.path.join(full_db_path, ref_name)

    

    if not os.path.exists(ref_path):
        os.symlink(os.path.abspath(args.reference), ref_path)
        log(f"Created symlink for reference file: {ref_path}")
    else:
        log(f"Reference file already exists at: {ref_path}")

    # Build the make_mibf command using local symlink
    cmd = [
        "make_mibf",
        "-i", ref_name,           # local file within db_dir
        "-o", base_name,                # write output to db_dir itself
        "-r", ref_name,           # local file within db_dir
        "-k", str(args.kmer),
        "-h", str(args.hash),
        "-t", str(args.threads)
    ]
    if args.verbose:
        cmd.append("-v")
    if args.debug:
        cmd.append("--debug")

    cmd = wrap_with_time(cmd, "make_mibf", args.output, args.track_time)

    log(f"Running command in {full_db_path}: {' '.join(cmd)}")
    if not args.dry_run:
        subprocess.check_call(cmd, cwd=full_db_path)
    else:
        log("Dry run: skipping execution")

    log("Finished building miBF.")


def run_aakomp(args):
    log("Running aaKomp...")
    cmd = [
        "aakomp",
        "-i", args.input,
        "-o", args.output,
        "-r", args.reference,
        "-t", str(args.threads),
        "-k", str(args.kmer),
        "-h", str(args.hash),
        "-l", str(args.lower_bound),
        "--mibf_path", args.mibf_path,
        "--rescue_kmer", str(args.rescue_kmer),
        "--max_offset", str(args.max_offset)
    ]
    if args.verbose:
        cmd.append("-v")
    if args.debug:
        cmd.append("--debug")

    cmd = wrap_with_time(cmd, "aakomp", args.output, args.track_time)

    log(f"Running command: {' '.join(cmd)}")
    if not args.dry_run:
        subprocess.check_call(cmd)
    else:
        log("Dry run: skipping execution")
    log("Finished running aaKomp.")

def run_aakomp_analysis(args):
    log("plotting aaKomp gff CDF ...")

    results_file = f"{args.output}.gff"
    rescue_threshold = args.lower_bound
    score_file = f"{args.output}_score.txt"

    cmd = [ "aakomp_plot.R", results_file, str(rescue_threshold), score_file ]

    cmd = wrap_with_time(cmd, "aakomp_plot.R", args.output, args.track_time)

    log(f"Running command: {' '.join(cmd)}")
    if not args.dry_run:
        subprocess.check_call(cmd)

    log("Finished post-analysis.")

def main():
    parser = argparse.ArgumentParser(description="aaKomp wrapper: download lineage, build or use miBF, run aaKomp")

    # Help passthroughs
    parser.add_argument("--help-aakomp", action="store_true")
    parser.add_argument("--help-mibf", action="store_true")

    # Parameters
    parser.add_argument("-i", "--input", help="Input file name")
    parser.add_argument("-o", "--output", default="_")
    parser.add_argument("-r", "--reference", required=False)
    parser.add_argument("-t", "--threads", type=int, default=48)
    parser.add_argument("-v", "--verbose", action="store_true")
    parser.add_argument("--debug", action="store_true")
    parser.add_argument("-H", "--hash", type=int, default=9)
    parser.add_argument("-k", "--kmer", type=int, default=9)
    parser.add_argument("-l", "--lower_bound", type=float, default=0.7)
    parser.add_argument("--rescue_kmer", type=int, default=4)
    parser.add_argument("--max_offset", type=int, default=2)

    # Input modes
    parser.add_argument("--lineage")
    parser.add_argument("--db-dir", required=True)

    # New flags
    parser.add_argument("--dry-run", action="store_true")
    parser.add_argument("--track-time", action="store_true")

    args = parser.parse_args()

    if args.help_aakomp:
        run_help("aakomp")
        sys.exit()
    if args.help_mibf:
        run_help("make_mibf")
        sys.exit()

    if not args.reference and not args.lineage:
        parser.error("--reference or --lineage must be provided.")
    if args.reference and args.lineage:
        parser.error("Cannot provide both --reference and --lineage.")
    if not args.input:
        parser.error("Input file is required.")
    elif not os.path.isfile(args.input):
        parser.error(f"Input file '{args.input}' does not exist.")
    if args.reference and not os.path.isfile(args.reference):
        parser.error(f"Reference file '{args.reference}' does not exist.")

    # Output all arguments
    log("Arguments:")
    for arg in vars(args):
        log(f"  {arg}: {getattr(args, arg)}")

    # Step 1: Lineage download if applicable
    if args.lineage:
        if not is_database_built(args.input):
            os.makedirs(args.db_dir, exist_ok=True)
            download_lineage(args.lineage, args.db_dir)

    # Step 2: Build mibf path
    base_name = (args.reference if args.reference else args.lineage).rsplit('.', 1)[0].rsplit('/')[-1]
    args.mibf_path = os.path.join(args.db_dir, f"{base_name}/", f"{base_name}.mibf")

    # Step 3: Build miBF
    if not is_database_built(args.mibf_path):
        run_make_mibf(args)

    # Step 4: Run aaKomp
    run_aakomp(args)


    run_aakomp_analysis(args)

if __name__ == "__main__":
    main()
